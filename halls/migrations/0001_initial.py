# Generated by Django 3.0.8 on 2020-07-23 08:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_tutor', models.BooleanField(default=False)),
                ('is_employee', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('P', 'Project'), ('A', 'Assignment'), ('T', 'Time_Bound_Challenges')], max_length=1)),
                ('title', models.CharField(max_length=255)),
                ('pub_date', models.DateTimeField()),
                ('deadline_date', models.DateTimeField()),
                ('body', models.TextField()),
                ('stipend', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tutorName', models.CharField(max_length=255)),
                ('HowToSolve', models.TextField()),
                ('tutorId', models.IntegerField()),
                ('tutorNumber', models.CharField(max_length=10, verbose_name='phone number')),
                ('confirmed', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('payment_completed', models.BooleanField(default=False)),
                ('challenge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='halls.Challenge')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ans', models.TextField()),
                ('solutionfile', models.FileField(blank='True', upload_to='files/solutions')),
                ('request', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='halls.Request')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nickname', models.CharField(max_length=255)),
                ('FirstName', models.CharField(max_length=255)),
                ('LastName', models.CharField(max_length=255)),
                ('is_verified', models.BooleanField(default=False)),
                ('Rating', models.CharField(choices=[('0', 'NotStarted'), ('1', 'Poor'), ('2', 'OK'), ('3', 'Nice'), ('4', 'Good'), ('5', 'Excellent')], max_length=1)),
                ('WhatsappNumber', models.CharField(max_length=10, verbose_name='phone number')),
                ('MoneyEarned', models.FloatField()),
                ('Skills', models.TextField()),
                ('University', models.CharField(blank=True, default='', max_length=100)),
                ('Branch', models.CharField(blank=True, default='', max_length=100)),
                ('Year', models.IntegerField(blank=True)),
                ('Resume', models.FileField(blank=True, upload_to='files/resume')),
                ('upiId', models.CharField(blank=True, default='', max_length=255)),
                ('AccountNumber', models.CharField(blank=True, default='', max_length=255)),
                ('BeneficiaryName', models.CharField(blank=True, default='', max_length=255)),
                ('IFSC', models.CharField(blank=True, default='', max_length=255)),
                ('Other_Details', models.TextField(blank=True, default='')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_details', models.TextField()),
                ('payment_file', models.FileField(blank='True', upload_to='files/payments')),
                ('request', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='halls.Request')),
            ],
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('image', models.ImageField(upload_to='images/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('attachment', models.FileField(upload_to='files/')),
                ('challenge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='halls.Challenge')),
            ],
        ),
        migrations.AddField(
            model_name='challenge',
            name='hall',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='halls.Hall'),
        ),
    ]
